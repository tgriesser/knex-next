// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`select columns 1`] = `
Immutable.SelectNodes {
  "__operation": "SELECT",
  "from": null,
  "where": Immutable.List [],
  "select": Immutable.List [
    "a",
    "b",
  ],
  "join": Immutable.List [],
  "having": Immutable.List [],
  "order": Immutable.List [],
  "union": Immutable.List [],
  "limit": null,
  "offset": null,
  "alias": null,
  "distinct": false,
  "lock": null,
  "meta": Immutable.Map {},
}
`;

exports[`select columns, with builder 1`] = `
Immutable.SelectNodes {
  "__operation": "SELECT",
  "from": null,
  "where": Immutable.List [],
  "select": Immutable.List [
    "a",
    "b",
    Immutable.SubQueryNode {
      "__typename": "SubQueryNode",
      "ast": Immutable.SelectNodes {
        "__operation": "SELECT",
        "from": null,
        "where": Immutable.List [],
        "select": Immutable.List [
          "c",
        ],
        "join": Immutable.List [],
        "having": Immutable.List [],
        "order": Immutable.List [],
        "union": Immutable.List [],
        "limit": null,
        "offset": null,
        "alias": null,
        "distinct": false,
        "lock": null,
        "meta": Immutable.Map {},
      },
    },
  ],
  "join": Immutable.List [],
  "having": Immutable.List [],
  "order": Immutable.List [],
  "union": Immutable.List [],
  "limit": null,
  "offset": null,
  "alias": null,
  "distinct": false,
  "lock": null,
  "meta": Immutable.Map {},
}
`;

exports[`select columns, with raw 1`] = `
Immutable.SelectNodes {
  "__operation": "SELECT",
  "from": null,
  "where": Immutable.List [],
  "select": Immutable.List [
    "a",
    "b",
    Immutable.RawNode {
      "__typename": "RawNode",
      "fragments": Immutable.List [
        "COUNT(*) as cnt",
      ],
      "bindings": Immutable.List [],
    },
  ],
  "join": Immutable.List [],
  "having": Immutable.List [],
  "order": Immutable.List [],
  "union": Immutable.List [],
  "limit": null,
  "offset": null,
  "alias": null,
  "distinct": false,
  "lock": null,
  "meta": Immutable.Map {},
}
`;

exports[`select from table 1`] = `
Immutable.SelectNodes {
  "__operation": "SELECT",
  "from": "users",
  "where": Immutable.List [],
  "select": Immutable.List [
    "a",
    "b",
  ],
  "join": Immutable.List [],
  "having": Immutable.List [],
  "order": Immutable.List [],
  "union": Immutable.List [],
  "limit": null,
  "offset": null,
  "alias": null,
  "distinct": false,
  "lock": null,
  "meta": Immutable.Map {},
}
`;

exports[`where clause 1`] = `
Immutable.SelectNodes {
  "__operation": "SELECT",
  "from": "users",
  "where": Immutable.List [
    Immutable.WhereExpressionNode {
      "__typename": "WhereExpressionNode",
      "not": null,
      "column": "id",
      "operator": "=",
      "value": 1,
      "andOr": "AND",
    },
  ],
  "select": Immutable.List [],
  "join": Immutable.List [],
  "having": Immutable.List [],
  "order": Immutable.List [],
  "union": Immutable.List [],
  "limit": null,
  "offset": null,
  "alias": null,
  "distinct": false,
  "lock": null,
  "meta": Immutable.Map {},
}
`;

exports[`where subquery 1`] = `
Immutable.SelectNodes {
  "__operation": "SELECT",
  "from": "users",
  "where": Immutable.List [
    Immutable.WhereSubNode {
      "__typename": "WhereSubNode",
      "not": null,
      "andOr": "AND",
      "ast": Immutable.WhereClauseNodes {
        "__clause": "WhereClause",
        "where": Immutable.List [
          Immutable.WhereExpressionNode {
            "__typename": "WhereExpressionNode",
            "not": null,
            "column": "id",
            "operator": "=",
            "value": 1,
            "andOr": "AND",
          },
          Immutable.WhereExpressionNode {
            "__typename": "WhereExpressionNode",
            "not": null,
            "column": "id",
            "operator": "=",
            "value": 2,
            "andOr": "AND",
          },
        ],
      },
    },
    Immutable.WhereExpressionNode {
      "__typename": "WhereExpressionNode",
      "not": null,
      "column": "id",
      "operator": "=",
      "value": 4,
      "andOr": "OR",
    },
  ],
  "select": Immutable.List [],
  "join": Immutable.List [],
  "having": Immutable.List [],
  "order": Immutable.List [],
  "union": Immutable.List [],
  "limit": null,
  "offset": null,
  "alias": null,
  "distinct": false,
  "lock": null,
  "meta": Immutable.Map {},
}
`;
